// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

package drakkar.oar.slice.transfer;

// <auto-generated>
//
// Generated from file `FileTransfer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


public interface FileStorePrx extends Ice.ObjectPrx
{
    public FilePrx read(String name, int num)
        throws FileAccessException;

    public FilePrx read(String name, int num, java.util.Map<String, String> __ctx)
        throws FileAccessException;

    public Ice.AsyncResult begin_read(String name, int num);

    public Ice.AsyncResult begin_read(String name, int num, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_read(String name, int num, Ice.Callback __cb);

    public Ice.AsyncResult begin_read(String name, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_read(String name, int num, Callback_FileStore_read __cb);

    public Ice.AsyncResult begin_read(String name, int num, java.util.Map<String, String> __ctx, Callback_FileStore_read __cb);

    public FilePrx end_read(Ice.AsyncResult __result)
        throws FileAccessException;

    public void write(String name, int offset, byte[] bytes);

    public void write(String name, int offset, byte[] bytes, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_write(String name, int offset, byte[] bytes);

    public Ice.AsyncResult begin_write(String name, int offset, byte[] bytes, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_write(String name, int offset, byte[] bytes, Ice.Callback __cb);

    public Ice.AsyncResult begin_write(String name, int offset, byte[] bytes, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_write(String name, int offset, byte[] bytes, Callback_FileStore_write __cb);

    public Ice.AsyncResult begin_write(String name, int offset, byte[] bytes, java.util.Map<String, String> __ctx, Callback_FileStore_write __cb);

    public void end_write(Ice.AsyncResult __result);
}
