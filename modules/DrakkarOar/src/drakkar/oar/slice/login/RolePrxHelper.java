// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

package drakkar.oar.slice.login;

// <auto-generated>
//
// Generated from file `InRole.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


public final class RolePrxHelper extends Ice.ObjectPrxHelperBase implements RolePrx
{
    public void
    disconnect()
    {
        disconnect(null, false);
    }

    public void
    disconnect(java.util.Map<String, String> __ctx)
    {
        disconnect(__ctx, true);
    }

    private void
    disconnect(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _RoleDel __del = (_RoleDel)__delBase;
                __del.disconnect(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __disconnect_name = "disconnect";

    public Ice.AsyncResult begin_disconnect()
    {
        return begin_disconnect(null, false, null);
    }

    public Ice.AsyncResult begin_disconnect(java.util.Map<String, String> __ctx)
    {
        return begin_disconnect(__ctx, true, null);
    }

    public Ice.AsyncResult begin_disconnect(Ice.Callback __cb)
    {
        return begin_disconnect(null, false, __cb);
    }

    public Ice.AsyncResult begin_disconnect(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_disconnect(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_disconnect(Callback_Role_disconnect __cb)
    {
        return begin_disconnect(null, false, __cb);
    }

    public Ice.AsyncResult begin_disconnect(java.util.Map<String, String> __ctx, Callback_Role_disconnect __cb)
    {
        return begin_disconnect(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_disconnect(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __disconnect_name, __cb);
        try
        {
            __result.__prepare(__disconnect_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_disconnect(Ice.AsyncResult __result)
    {
        __end(__result, __disconnect_name);
    }

    public void
    login(drakkar.oar.Seeker memb, drakkar.oar.slice.client.ClientSidePrx client, drakkar.oar.slice.server.ServerSidePrxHolder server)
        throws drakkar.oar.slice.error.RequestException
    {
        login(memb, client, server, null, false);
    }

    public void
    login(drakkar.oar.Seeker memb, drakkar.oar.slice.client.ClientSidePrx client, drakkar.oar.slice.server.ServerSidePrxHolder server, java.util.Map<String, String> __ctx)
        throws drakkar.oar.slice.error.RequestException
    {
        login(memb, client, server, __ctx, true);
    }

    private void
    login(drakkar.oar.Seeker memb, drakkar.oar.slice.client.ClientSidePrx client, drakkar.oar.slice.server.ServerSidePrxHolder server, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws drakkar.oar.slice.error.RequestException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("login");
                __delBase = __getDelegate(false);
                _RoleDel __del = (_RoleDel)__delBase;
                __del.login(memb, client, server, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __login_name = "login";

    public Ice.AsyncResult begin_login(drakkar.oar.Seeker memb, drakkar.oar.slice.client.ClientSidePrx client)
    {
        return begin_login(memb, client, null, false, null);
    }

    public Ice.AsyncResult begin_login(drakkar.oar.Seeker memb, drakkar.oar.slice.client.ClientSidePrx client, java.util.Map<String, String> __ctx)
    {
        return begin_login(memb, client, __ctx, true, null);
    }

    public Ice.AsyncResult begin_login(drakkar.oar.Seeker memb, drakkar.oar.slice.client.ClientSidePrx client, Ice.Callback __cb)
    {
        return begin_login(memb, client, null, false, __cb);
    }

    public Ice.AsyncResult begin_login(drakkar.oar.Seeker memb, drakkar.oar.slice.client.ClientSidePrx client, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_login(memb, client, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_login(drakkar.oar.Seeker memb, drakkar.oar.slice.client.ClientSidePrx client, Callback_Role_login __cb)
    {
        return begin_login(memb, client, null, false, __cb);
    }

    public Ice.AsyncResult begin_login(drakkar.oar.Seeker memb, drakkar.oar.slice.client.ClientSidePrx client, java.util.Map<String, String> __ctx, Callback_Role_login __cb)
    {
        return begin_login(memb, client, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_login(drakkar.oar.Seeker memb, drakkar.oar.slice.client.ClientSidePrx client, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__login_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __login_name, __cb);
        try
        {
            __result.__prepare(__login_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeSerializable(memb);
            drakkar.oar.slice.client.ClientSidePrxHelper.__write(__os, client);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_login(drakkar.oar.slice.server.ServerSidePrxHolder server, Ice.AsyncResult __result)
        throws drakkar.oar.slice.error.RequestException
    {
        Ice.AsyncResult.__check(__result, this, __login_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(drakkar.oar.slice.error.RequestException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        server.value = drakkar.oar.slice.server.ServerSidePrxHelper.__read(__is);
        __is.endReadEncaps();
    }

    public static RolePrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        RolePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (RolePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::drakkar::oar::slice::login::Role"))
                {
                    RolePrxHelper __h = new RolePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static RolePrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        RolePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (RolePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::drakkar::oar::slice::login::Role", __ctx))
                {
                    RolePrxHelper __h = new RolePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static RolePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        RolePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::drakkar::oar::slice::login::Role"))
                {
                    RolePrxHelper __h = new RolePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static RolePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        RolePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::drakkar::oar::slice::login::Role", __ctx))
                {
                    RolePrxHelper __h = new RolePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static RolePrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        RolePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (RolePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                RolePrxHelper __h = new RolePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static RolePrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        RolePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            RolePrxHelper __h = new RolePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _RoleDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _RoleDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, RolePrx v)
    {
        __os.writeProxy(v);
    }

    public static RolePrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            RolePrxHelper result = new RolePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
